class Board
  # render - skip
  # column
  # column_full?
  # place(piece_type, column)
  # four_in_a_row?
  # detected_win?
  # vertical_win?(piece_type)
  # horizontal_win?(piece_type)
  # diagonal_win?(piece_type)
  # generate_diagonals(rect_array)
  # board_full?

column: it 'takes a column_index as a parameter, flips the board on its side, and returns the column'
  board = Board.new([
    [' ',' ','O',' ',' ',' ',' '],
    [' ',' ','O',' ',' ',' ',' '],
    [' ',' ','X','O','O','X','X'],
    [' ',' ','O','X','O','O','X'],
    [' ',' ','O','X','X','X','O'],
    ['X','O','O','X','O','X','X']
  ])
  board.column(2) =>
    ["O", "O", "X", "O", "O", "O"]

column_full?: 
  it 'takes a column_index and returns true if that column_index is full'
  it 'takes a column_index and returns false if that column_index is not full'

place:
  it 'takes a piece_type and a column_index and adds that piece to the first empty space in that column'
